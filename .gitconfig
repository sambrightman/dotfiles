[alias]
	a = add
	ac = !git a . && git cm
	ai = add --interactive
	ap = add --patch
	at = !"append_ticket() { if [ $# -gt 0 ]; then git ca -m \"$1 $(git lgs)\n\n$(git lgb)\"; else echo 'supply some ticket(s) to prepend to the summary'; fi; }; append_ticket"
    authors = shortlog -s -e -n --all
	br = branch -vv
	brav = branch --all -vv
	bss = bisect start
	bsb = bisect bad
	bsg = bisect good
	bsl = bisect log
	bsr = bisect run
	brc = !"git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n"
	ca = commit --amend
	caa = !"amend_author() { local author=\"$1\" && shift; git ca --no-edit --author \"$author\" \"$@\" && git rc; }; amend_author"
	ce = config --global --edit
	co = checkout
	cob = checkout -b
	cocs = !"checkout_clean_submodules() { git co $1; git smu; git cfd; git smc; }; checkout_clean_submodules"
	cfd = clean -ffd
	ci = commit
	cm = commit -m
	cia = commit -C HEAD@{1}
	ciae = commit -c HEAD@{1}
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	dc = diff --cached
	ds = diff --stat
	du = !git diff --pretty=authoneline --reverse $(git ub)..
	ffm = merge --ff-only
	fu = commit --amend --no-edit
	fuc = commit --fixup
	lg = log --pretty=authoneline
	lga = log -n1 HEAD@{1}
	lgf = log --pretty=authonelinefull
	lgs = !"log_summary() { git log -n1 --format=%s HEAD~${1:-0}; }; log_summary"
	lgb = !"log_body() { git log -n1 --format=%b HEAD~${1:-0}; }; log_body"
	lgi = !git log --pretty=authoneline ..$(git ub)
	lgu = !git log --pretty=authoneline --reverse $(git ub)..
	lgus = !git lgu --stat
	lgut = !git lgu | tail
	ma = merge --abort
	me = !"git lg --author=\"$(git config user.name)\""
	pp = !"git lgu; echo; git du --stat"
	pr = pull --rebase
	prp = !git pr && git push
	pf = push --force-with-lease
	ra = rebase --abort
	rb = rebase
	rc = rebase --continue
	rs = rebase --skip
	ri = rebase --interactive
	rl = reflog --pretty=refonelinefull
	rsh = reset HEAD
	rsa = reset --hard
	rsp = reset --patch
	rss = reset --soft
	rssh = reset --soft HEAD~1
	renametag = !"renametag() { local oldtag=$1 && shift; local newtag=$1 && shift; if [[ -z \"$oldtag\" || -z \"$newtag\" ]]; then echo \"usage: git renametag oldtag newtag\"; return 1; fi; git tag $newtag $(git cat-file -p $oldtag | sed \"s/^tag $oldtag$/tag $newtag/\" | git mktag) && git tag -d $oldtag; }; renametag"
	remotes = remote show
	rso = remote show origin
	rv = revert --no-commit
	rva = revert --abort
	rvc = revert --continue
	rvh = revert --no-commit HEAD
	sa = stash apply
	sd = stash drop
	sl = stash list --pretty=stashoneline
	sm = submodule
	smc = submodule foreach --recursive git clean -ffd
	sms = submodule foreach --recursive git status
	smu = submodule update --init --recursive
	sp = stash pop
	ss = stash show -p
	sv = stash save -k -u
	st = status
	sti = status --ignore
	bb = !echo $(git cb)_bb
	cb = rev-parse --abbrev-ref HEAD
	ub = rev-parse --abbrev-ref --symbolic-full-name @{u}
	qb = !git br $(git bb)
	qd = !git br -D $(git bb)
	db = !git diff $(git bb)
	url = !"remote_url() { git config remote.${1:-origin}.url; }; remote_url"
	name = show --name-only
	graph = log --graph --all --pretty=graphtight --abbrev-commit --date=relative
	biggraph = log --graph --all --pretty=graphloose --abbrev-commit
	tags = tag
	tagdates = log --tags --simplify-by-decoration --pretty=tagdates
	conflicts = diff --name-only --diff-filter=U
	contains = branch -a --contains
	ignored = ls-files --others --exclude-standard --ignored
	untracked = ls-files --others --exclude-standard
	alias = !"some_filter() { if [ $# -gt 0 ]; then grep $*; else cat; fi; }; git config --list | grep alias | some_filter"
[pretty]
	graphtight = %C(bold red)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)- %an%C(reset)%C(bold yellow)%d%C(reset)
	graphloose = %C(bold red)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n          %C(white)%s%C(reset) %C(bold white)- %an%C(reset)
	authoneline = %C(bold red)%h %C(reset)%s %C(bold green)%aN %C(bold magenta)(%ar)%C(reset)%C(yellow)%d%C(reset)
	authonelinefull = %C(bold red)%h %C(reset)%s %C(bold green)%aN %C(bold magenta)(%aD)%C(reset)%C(yellow)%d%C(reset)
	stashoneline = %C(bold red)%h %C(bold green)%gd %C(reset)%s %C(bold green)%aN %C(bold magenta)(%ar)%C(reset)%C(yellow)%d%C(reset)
	refonelinefull = %C(auto)%h %gd: %gs %C(bold magenta)(%aD)%C(reset)
	tagdates = %ci %d
[format]
	pretty = fuller
[user]
	name = Sam Brightman
	# email from include
[include]
	path = .gitconfig_user
	path = .gitconfig_tokens
	path = .gitconfig_bullshit
[branch]
	autosetupmerge = always
	autosetuprebase = always
[color]
	ui = true
[core]
	editor = emacswrapper
[diff]
	noprefix = true
[pager]
	blame = less -S
[pull]
	rebase = true
[push]
	default = current
	followTags = true
[rebase]
	autosquash = true
	autostash = true
[github]
	user = sambrightman
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
